version: "3"

services:
  influx:
    image: influxdb:2.0
    environment:
      DOCKER_INFLUXDB_INIT_MODE: "setup"
      DOCKER_INFLUXDB_INIT_USERNAME: "influx"
      DOCKER_INFLUXDB_INIT_PASSWORD: "influx-password-123!"
      DOCKER_INFLUXDB_INIT_ORG: "my-org"
      DOCKER_INFLUXDB_INIT_BUCKET: "my-bucket"
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: "influx-password-123!"
    ports:
      - 127.0.0.1:8086:8086
    networks:
      - app

    #volumes:
    #  - ./volumes/influx:/var/lib/influxdb
  grafana-app:
    image: grafana/grafana:8.2.4
    ports:
      - 127.0.0.1:3000:3000
    #volumes:
    #  - ./docker/grafana-app/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yaml:ro
    #  - ./docker/grafana-app/grafana.ini:/etc/grafana/grafana.ini:ro
    #  - ./volumes/grafana:/var/lib/grafana
    user: root
    command:
      - /bin/sh
      - -c
      - |
        # start consul agent and grafana
        set -ex
        chown grafana /var/lib/grafana
        env | awk '/GF_|PATH/ { print "export \""$$0"\"" }' > /tmp/environ.sh
        exec su -s /bin/sh -c "set -ex; . /tmp/environ.sh; exec /run.sh" - grafana
    networks:
      - app

  neo4j:
    image: neo4j:4.3.7
    environment:
      NEO4J_AUTH: "neo4j/neo4j-password-123!"
    #volumes:
    #  - ./volumes/neo4j/conf:/conf
    #  - ./volumes/neo4j/data:/data
    #  - ./volumes/neo4j/import:/import
    #  - ./volumes/neo4j/logs:/logs
    #  - ./volumes/neo4j/plugins:/plugins
    ports:
      - 127.0.0.1:7474:7474
      - 127.0.0.1:7687:7687
    networks:
      - app

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      GRAFANA_USER: "admin"
      GRAFANA_PASSWORD: "admin"
      PROXY_GRAFANA_TARGET_URL: "http://grafana-app:3000/grafana"

      SPRING_NEO4J_AUTHENTICATION_PASSWORD: "neo4j-password-123!"
      SPRING_NEO4J_URI: "neo4j://neo4j"

      INFLUX_TOKEN: "influx-password-123!"
      INFLUX_URL: "http://influx:8086"
    ports:
      - 127.0.0.1:8080:8080
    networks:
      - monitoring
      - app

  nginx:
    image: nginx
    #volumes:
    #  - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    #  - ./docker/nginx/nginx-selfsigned.crt:/etc/ssl/certs/nginx-selfsigned.crt
    #  - ./docker/nginx/nginx-selfsigned.key:/etc/ssl/private/nginx-selfsigned.key
    ports:
      - 127.0.0.1:80:80
      - 127.0.0.1:443:443
    networks:
      - app

  grafana-monitoring:
    image: grafana/grafana:8.2.4
    user: root
    command:
      - /bin/sh
      - -c
      - |
        # start consul agent and grafana
        set -ex
        chown grafana /var/lib/grafana
        env | awk '/GF_|PATH/ { print "export \""$$0"\"" }' > /tmp/environ.sh
        exec su -s /bin/sh -c "set -ex; . /tmp/environ.sh; exec /run.sh" - grafana
    #volumes:
    #  - ./docker/grafana-monitoring/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    #  - ./volumes/grafana-monitoring:/var/lib/grafana
    ports:
      - 127.0.0.1:3001:3000
    restart: always
    networks:
      - monitoring

  node-exporter:
    image: prom/node-exporter
    ports:
      - 127.0.0.1:9100:9100
    restart: always
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge
  app:
    driver: bridge